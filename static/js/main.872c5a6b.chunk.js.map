{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","state","fname","lname","email","message","className","action","type","id","name","placeholder","value","this","onChange","e","setState","target","onClick","handleFormSubmit","event","preventDefault","console","log","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8JAAAA,EAAOC,QAAU,IAA0B,kC,qIC4D5BC,G,wBAlBT,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,GACPC,MAAO,GACPC,MAAO,GACPC,QAAS,IANM,E,sEArCX,IAAD,OACL,OACI,yBAAKC,UAAU,OACf,yCACA,6BACA,0BAAMC,OAAO,KACT,6CACA,2BAAOC,KAAK,OAAOC,GAAG,QAAQC,KAAK,YAAYC,YAAY,cACvDC,MAAOC,KAAKZ,MAAMC,MAClBY,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEd,MAAOa,EAAEE,OAAOL,WAGnD,4CACA,2BAAOJ,KAAK,OAAOC,GAAG,QAAQC,KAAK,WAAWC,YAAY,mBACtDC,MAAOC,KAAKZ,MAAME,MAClBW,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEb,MAAOY,EAAEE,OAAOL,WAGnD,wCACA,2BAAOJ,KAAK,QAAQC,GAAG,QAAQC,KAAK,QAAQC,YAAY,aACpDC,MAAOC,KAAKZ,MAAMG,MAClBU,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEZ,MAAOW,EAAEE,OAAOL,WAGnD,0CACA,8BAAUH,GAAG,UAAUC,KAAK,UAAUC,YAAY,oBAC9CG,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEX,QAASU,EAAEE,OAAOL,SACjDA,MAAOC,KAAKZ,MAAMI,UAGtB,2BAAOG,KAAK,SAASU,QAAS,SAAAH,GAAC,OAAI,EAAKI,iBAAiBJ,IAAIH,MAAM,kB,sDAiB3DQ,GAChBA,EAAMC,iBACNC,QAAQC,IAAIV,KAAKZ,W,GAlDPuB,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.872c5a6b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n            <p>Contact Me</p>\n            <div>\n            <form action=\"#\" >\n                <label>First Name</label>\n                <input type=\"text\" id=\"fname\" name=\"firstname\" placeholder=\"Your name..\"\n                    value={this.state.fname}\n                    onChange={e => this.setState({ fname: e.target.value })}\n                />\n\n                <label>Last Name</label>\n                <input type=\"text\" id=\"lname\" name=\"lastname\" placeholder=\"Your last name..\"\n                    value={this.state.lname}\n                    onChange={e => this.setState({ lname: e.target.value })}\n                />\n\n                <label>Email</label>\n                <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Your email\"\n                    value={this.state.email}\n                    onChange={e => this.setState({ email: e.target.value })}\n                />\n\n                <label>Message</label>\n                <textarea id=\"message\" name=\"message\" placeholder=\"Write something..\"\n                    onChange={e => this.setState({ message: e.target.value })}\n                    value={this.state.message}\n                ></textarea>\n \n                <input type=\"submit\" onClick={e => this.handleFormSubmit(e)} value=\"Submit\" />\n            </form >\n            </div>\n            </div>\n        );\n      }\n\n      constructor(props) {\n        super(props);\n        this.state = {\n          fname: '',\n          lname: '',\n          email: '',\n          message: '',\n        }\n      }\n\n      handleFormSubmit( event ) {\n        event.preventDefault();\n        console.log(this.state);\n      }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}